blueprint:
  name: 💡 Akwarium – Światła + CO₂ + Karmienie + Serwis
  description: >
    Kompletny blueprint automatyzacji akwarium:
    • Automatyczne rampy jasności dla 4 kanałów światła
    • CO₂ – włącza się z pierwszym światłem i wyłącza 30 min przed końcem
    • Tryb karmienia – zatrzymuje filtr, włącza timer i przywraca po zakończeniu
    • Tryb serwisowy – wszystkie światła 90%, filtr OFF, zapis i przywrócenie stanu
  domain: automation
  author: ChatGPT (GPT-5)
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/akwarium.yaml

mode: restart
max_exceeded: silent

input:
  # === ŚWIATŁA ===
  light_bialy_front:
    name: Biały Front
    selector:
      entity:
        domain: light
  bf_on_time:
    name: Start rozjaśniania
    default: "15:30:00"
    selector:
      time: {}
  bf_ramp_up:
    name: Czas rozjaśniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240
  bf_brightness:
    name: Jasność docelowa (%)
    default: 80
    selector:
      number:
        min: 1
        max: 100
        unit_of_measurement: "%"
  bf_dim_start:
    name: Start ściemniania
    default: "21:30:00"
    selector:
      time: {}
  bf_ramp_down:
    name: Czas ściemniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240

  light_bialy_tyl:
    name: Biały Tył
    selector:
      entity:
        domain: light
  bt_on_time:
    name: Start rozjaśniania
    default: "15:30:00"
    selector:
      time: {}
  bt_ramp_up:
    name: Czas rozjaśniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240
  bt_brightness:
    name: Jasność docelowa (%)
    default: 80
    selector:
      number:
        min: 1
        max: 100
  bt_dim_start:
    name: Start ściemniania
    default: "21:30:00"
    selector:
      time: {}
  bt_ramp_down:
    name: Czas ściemniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240

  light_sun:
    name: Sun
    selector:
      entity:
        domain: light
  sun_on_time:
    name: Start rozjaśniania
    default: "15:30:00"
    selector:
      time: {}
  sun_ramp_up:
    name: Czas rozjaśniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240
  sun_brightness:
    name: Jasność docelowa (%)
    default: 70
    selector:
      number:
        min: 1
        max: 100
  sun_dim_start:
    name: Start ściemniania
    default: "21:30:00"
    selector:
      time: {}
  sun_ramp_down:
    name: Czas ściemniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240

  light_grow:
    name: Grow
    selector:
      entity:
        domain: light
  grow_on_time:
    name: Start rozjaśniania
    default: "15:30:00"
    selector:
      time: {}
  grow_ramp_up:
    name: Czas rozjaśniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240
  grow_brightness:
    name: Jasność docelowa (%)
    default: 85
    selector:
      number:
        min: 1
        max: 100
  grow_dim_start:
    name: Start ściemniania
    default: "21:30:00"
    selector:
      time: {}
  grow_ramp_down:
    name: Czas ściemniania (min)
    default: 30
    selector:
      number:
        min: 1
        max: 240

  # === CO₂ i FILTR ===
  co2_switch:
    name: Przełącznik CO₂ (opcjonalny)
    default: ""
    selector:
      entity:
        domain: switch
  filter_switch:
    name: Filtr akwariowy (opcjonalny)
    default: ""
    selector:
      entity:
        domain: switch

  # === HELPERY ===
  feeding_helper:
    name: Tryb karmienia (input_boolean)
    default: ""
    selector:
      entity:
        domain: input_boolean
  feeding_timer:
    name: Timer karmienia
    default: ""
    selector:
      entity:
        domain: timer
  feeding_duration:
    name: Czas karmienia (min)
    default: 15
    selector:
      number:
        min: 1
        max: 60
  service_mode_helper:
    name: Tryb serwisowy
    default: ""
    selector:
      entity:
        domain: input_boolean
  service_state_text:
    name: Bufor stanu (input_text)
    default: ""
    selector:
      entity:
        domain: input_text

trigger:
  - platform: time_pattern
    seconds: "/30"
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: !input feeding_helper
  - platform: state
    entity_id: !input service_mode_helper
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input feeding_timer

action:
  # === 1. Opóźnienie po starcie HA ===
  - choose:
      - conditions: "{{ trigger.platform == 'homeassistant' }}"
        sequence:
          - delay: "00:00:10"

  # === 2. Ustaw zmienne ===
  - variables:
      lights:
        - { id: bf, name: "Biały Front", entity: !input light_bialy_front, on_time: !input bf_on_time, ramp_up_min: !input bf_ramp_up, target_pct: !input bf_brightness, dim_time: !input bf_dim_start, ramp_down_min: !input bf_ramp_down }
        - { id: bt, name: "Biały Tył", entity: !input light_bialy_tyl, on_time: !input bt_on_time, ramp_up_min: !input bt_ramp_up, target_pct: !input bt_brightness, dim_time: !input bt_dim_start, ramp_down_min: !input bt_ramp_down }
        - { id: sun, name: "Sun", entity: !input light_sun, on_time: !input sun_on_time, ramp_up_min: !input sun_ramp_up, target_pct: !input sun_brightness, dim_time: !input sun_dim_start, ramp_down_min: !input sun_ramp_down }
        - { id: grow, name: "Grow", entity: !input light_grow, on_time: !input grow_on_time, ramp_up_min: !input grow_ramp_up, target_pct: !input grow_brightness, dim_time: !input grow_dim_start, ramp_down_min: !input grow_ramp_down }
      co2_switch: !input co2_switch
      filter_switch: !input filter_switch
      feeding_helper: !input feeding_helper
      feeding_timer: !input feeding_timer
      feeding_duration: !input feeding_duration
      service_mode_helper: !input service_mode_helper
      service_state_text: !input service_state_text

  # === 3. Światła (rampy) ===
  - alias: "Sterowanie rampami"
    repeat:
      for_each: "{{ lights }}"
      sequence:
        - variables:
            ch: "{{ repeat.item }}"
            now_ts: "{{ as_timestamp(now()) }}"
            on_ts: "{{ as_timestamp(strptime(ch.on_time, '%H:%M:%S')) }}"
            dim_ts: "{{ as_timestamp(strptime(ch.dim_time, '%H:%M:%S')) }}"
            ramp_up_s: "{{ (ch.ramp_up_min | int) * 60 }}"
            ramp_down_s: "{{ (ch.ramp_down_min | int) * 60 }}"
            target_pct: "{{ ch.target_pct | int }}"
        - choose:
            - conditions: "{{ now_ts >= on_ts and now_ts < (on_ts + ramp_up_s) }}"
              sequence:
                - variables:
                    elapsed: "{{ now_ts - on_ts }}"
                    pct: "{{ [((elapsed / (ramp_up_s / target_pct)) | round(0)), target_pct] | min }}"
                - service: light.turn_on
                  data:
                    entity_id: "{{ ch.entity }}"
                    brightness_pct: "{{ pct }}"
            - conditions: "{{ now_ts >= dim_ts and now_ts < (dim_ts + ramp_down_s) }}"
              sequence:
                - variables:
                    elapsed: "{{ now_ts - dim_ts }}"
                    pct: "{{ [(target_pct - (elapsed / (ramp_down_s / target_pct))) | round(0), 0] | max }}"
                - service: light.turn_on
                  data:
                    entity_id: "{{ ch.entity }}"
                    brightness_pct: "{{ pct }}"
            - conditions: "{{ now_ts >= (dim_ts + ramp_down_s) }}"
              sequence:
                - service: light.turn_off
                  data:
                    entity_id: "{{ ch.entity }}"

  # === 4. Tryb karmienia ===
  - alias: "Tryb karmienia"
    choose:
      - conditions: "{{ feeding_helper != '' and is_state(feeding_helper, 'on') }}"
        sequence:
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    data:
                      entity_id: "{{ filter_switch }}"
          - choose:
              - conditions: "{{ feeding_timer != '' }}"
                sequence:
                  - service: timer.start
                    data:
                      entity_id: "{{ feeding_timer }}"
                      duration: "{{ (feeding_duration | int) * 60 }}"
      - conditions: "{{ trigger.event_type == 'timer.finished' and trigger.event.data.entity_id == feeding_timer }}"
        sequence:
          - choose:
              - conditions: "{{ filter_switch != '' }}"
                sequence:
                  - service: switch.turn_on
                    data:
                      entity_id: "{{ filter_switch }}"
          - choose:
              - conditions: "{{ feeding_helper != '' }}"
                sequence:
                  - service: input_boolean.turn_off
                    data:
                      entity_id: "{{ feeding_helper }}"

  # === 5. Tryb serwisowy ===
  - alias: "Tryb serwisowy"
    choose:
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'on') }}"
        sequence:
          - choose:
              - conditions: "{{ service_state_text != '' }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: "{{ service_state_text }}"
                      value: >
                        {{ {
                          'filter': states(filter_switch),
                          'co2': states(co2_switch),
                          'lights': dict((item.id, states(item.entity)) for item in lights)
                        } | to_json }}
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    data:
                      entity_id: "{{ filter_switch }}"
              - conditions: "{{ co2_switch != '' and is_state(co2_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    data:
                      entity_id: "{{ co2_switch }}"
          - repeat:
              for_each: "{{ lights }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: "{{ repeat.item.entity }}"
                    brightness_pct: 90
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'off') }}"
        sequence:
          - choose:
              - conditions: "{{ service_state_text != '' }}"
                sequence:
                  - variables:
                      prev: "{{ states(service_state_text) | from_json }}"
                  - choose:
                      - conditions: "{{ 'filter' in prev and prev.filter == 'on' }}"
                        sequence:
                          - service: switch.turn_on
                            data:
                              entity_id: "{{ filter_switch }}"
                      - conditions: "{{ 'co2' in prev and prev.co2 == 'on' }}"
                        sequence:
                          - service: switch.turn_on
                            data:
                              entity_id: "{{ co2_switch }}"
                      - conditions: "{{ 'lights' in prev }}"
                        sequence:
                          - repeat:
                              for_each: "{{ lights }}"
                              sequence:
                                - choose:
                                    - conditions: "{{ prev.lights[repeat.item.id] == 'on' }}"
                                      sequence:
                                        - service: light.turn_on
                                          data:
                                            entity_id: "{{ repeat.item.entity }}"
                                    - conditions: "{{ prev.lights[repeat.item.id] == 'off' }}"
                                      sequence:
                                        - service: light.turn_off
                                          data:
                                            entity_id: "{{ repeat.item.entity }}"

  # === 6. CO₂ kontrola ===
  - alias: "Kontrola CO₂"
    sequence:
      - variables:
          first_on: "{{ (lights | sort(attribute='on_time') | first).on_time }}"
          last_dim: "{{ (lights | sort(attribute='dim_time') | last).dim_time }}"
          now_dt: "{{ now() }}"
          should_be_on: >
            {% set f = as_datetime(strptime(first_on, '%H:%M:%S')) %}
            {% set l = as_datetime(strptime(last_dim, '%H:%M:%S')) - timedelta(minutes=30) %}
            {{ f <= now_dt < l }}
      - choose:
          - conditions: "{{ co2_switch != '' and should_be_on and not is_state(co2_switch, 'on') }}"
            sequence:
              - service: switch.turn_on
                data:
                  entity_id: "{{ co2_switch }}"
          - conditions: "{{ co2_switch != '' and not should_be_on and not is_state(co2_switch, 'off') }}"
            sequence:
              - service: switch.turn_off
                data:
                  entity_id: "{{ co2_switch }}"
                  
