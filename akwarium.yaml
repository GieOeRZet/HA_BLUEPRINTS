blueprint:
  name: 💡 Akwarium – Oświetlenie + CO₂ + Karmienie + Serwis
  description: >
    Pełny blueprint automatyzacji dla akwarium:
      • Steruje 4 kanałami oświetlenia z płynnymi rampami jasności (1% krok co 30 s)
      • Obsługuje automatyczne włączanie i wyłączanie CO₂
      • Tryb karmienia: wyłącza filtr i przywraca po czasie (lub manualnie)
      • Tryb serwisowy: zapisuje i przywraca stany świateł i filtra
      • Możliwość ręcznego przypisania wszystkich helperów

  # 👉 Import przez URL w Home Assistant
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/akwarium.yaml

  domain: automation
  author: ChatGPT (GPT-5)
  homeassistant:
    min_version: 2024.8.0

  ####################################################
  #                     INPUTS                       #
  ####################################################
  input:
    # === Światła (4 kanały) ===
    light_bialy_front:
      name: Biały Front (light)
      selector:
        entity:
          domain: light
    bf_on_time:
      name: Start rozjaśniania
      default: "15:30:00"
      selector:
        time: {}
    bf_ramp_up:
      name: Czas rozjaśniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    bf_brightness:
      name: Jasność docelowa (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    bf_dim_start:
      name: Start wygaszania
      default: "21:30:00"
      selector:
        time: {}
    bf_ramp_down:
      name: Czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    light_bialy_tyl:
      name: Biały Tył
      selector:
        entity:
          domain: light
    bt_on_time:
      name: Start rozjaśniania
      default: "15:40:00"
      selector:
        time: {}
    bt_ramp_up:
      name: Czas rozjaśniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    bt_brightness:
      name: Jasność docelowa (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    bt_dim_start:
      name: Start wygaszania
      default: "21:40:00"
      selector:
        time: {}
    bt_ramp_down:
      name: Czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    light_sun:
      name: Sun
      selector:
        entity:
          domain: light
    sun_on_time:
      name: Start rozjaśniania
      default: "15:20:00"
      selector:
        time: {}
    sun_ramp_up:
      name: Czas rozjaśniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    sun_brightness:
      name: Jasność docelowa (%)
      default: 70
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    sun_dim_start:
      name: Start wygaszania
      default: "21:20:00"
      selector:
        time: {}
    sun_ramp_down:
      name: Czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    light_grow:
      name: Grow
      selector:
        entity:
          domain: light
    grow_on_time:
      name: Start rozjaśniania
      default: "15:10:00"
      selector:
        time: {}
    grow_ramp_up:
      name: Czas rozjaśniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    grow_brightness:
      name: Jasność docelowa (%)
      default: 85
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    grow_dim_start:
      name: Start wygaszania
      default: "21:10:00"
      selector:
        time: {}
    grow_ramp_down:
      name: Czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    # === CO₂ i filtr ===
    co2_switch:
      name: (opcjonalny) Przełącznik CO₂
      default: ""
      selector:
        entity:
          domain: switch
    filter_switch:
      name: (opcjonalny) Filtr akwariowy
      default: ""
      selector:
        entity:
          domain: switch

    # === Helpery ===
    feeding_helper:
      name: (opcjonalny) Tryb karmienia
      default: ""
      selector:
        entity:
          domain: input_boolean
    feeding_timer:
      name: (opcjonalny) Timer karmienia
      default: ""
      selector:
        entity:
          domain: timer
    feeding_duration:
      name: Czas karmienia (min)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          unit_of_measurement: min
    service_mode_helper:
      name: (opcjonalny) Tryb serwisowy
      default: ""
      selector:
        entity:
          domain: input_boolean
    service_state_text:
      name: (opcjonalny) Bufor stanu
      default: ""
      selector:
        entity:
          domain: input_text

####################################################
#                TRYB DZIAŁANIA                    #
####################################################
mode: restart
max_exceeded: silent

####################################################
#                   TRIGGERS                       #
####################################################
trigger:
  - platform: time_pattern
    seconds: "/30"
  - platform: homeassistant
    event: start
    # ⏱️ Dodano opóźnienie 10s po starcie
  - platform: state
    entity_id: !input feeding_helper
    to: "on"
    enabled: true
  
  - platform: state
    entity_id: !input service_mode_helper
    enabled: "{{ service_mode_helper != '' }}"
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input feeding_timer
    enabled: "{{ feeding_timer != '' }}"

####################################################
#                   VARIABLES                      #
####################################################
variables:
  lights:
    - id: bf
      name: "Biały Front"
      entity: !input light_bialy_front
      on_time: !input bf_on_time
      ramp_up_min: !input bf_ramp_up
      target_pct: !input bf_brightness
      dim_time: !input bf_dim_start
      ramp_down_min: !input bf_ramp_down
    - id: bt
      name: "Biały Tył"
      entity: !input light_bialy_tyl
      on_time: !input bt_on_time
      ramp_up_min: !input bt_ramp_up
      target_pct: !input bt_brightness
      dim_time: !input bt_dim_start
      ramp_down_min: !input bt_ramp_down
    - id: sun
      name: "Sun"
      entity: !input light_sun
      on_time: !input sun_on_time
      ramp_up_min: !input sun_ramp_up
      target_pct: !input sun_brightness
      dim_time: !input sun_dim_start
      ramp_down_min: !input sun_ramp_down
    - id: grow
      name: "Grow"
      entity: !input light_grow
      on_time: !input grow_on_time
      ramp_up_min: !input grow_ramp_up
      target_pct: !input grow_brightness
      dim_time: !input grow_dim_start
      ramp_down_min: !input grow_ramp_down

  co2_switch: !input co2_switch
  filter_switch: !input filter_switch
  feeding_helper: !input feeding_helper
  feeding_timer: !input feeding_timer
  feeding_duration: !input feeding_duration
  service_mode_helper: !input service_mode_helper
  service_state_text: !input service_state_text

####################################################
#                    ACTIONS                       #
####################################################
action:
  - alias: "Opóźnienie po starcie Home Assistant"
    choose:
      - conditions: "{{ trigger.platform == 'homeassistant' }}"
        sequence:
          - delay: "00:00:10"

  - alias: "Tryb serwisowy"
    choose:
      # --- Aktywacja trybu serwisowego ---
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'on') }}"
        sequence:
          - variables:
              saved_states: >
                {% set s = {} %}
                {% for l in lights %}
                  {% set b = ((state_attr(l.entity, 'brightness')|int(0)) / 255 * 100) | round(0) %}
                  {% set _ = s.update({ l.entity: {'on': is_state(l.entity,'on'), 'brightness': b } }) %}
                {% endfor %}
                {% if filter_switch != '' %}
                  {% set _ = s.update({'filter': is_state(filter_switch,'on')}) %}
                {% endif %}
                {{ s | to_json }}
          - choose:
              - conditions: "{{ service_state_text != '' }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: "{{ service_state_text }}"
                    data:
                      value: "{{ saved_states }}"
          - repeat:
              for_each: "{{ lights }}"
              sequence:
                - service: light.turn_on
                  target:
                    entity_id: "{{ repeat.item.entity }}"
                  data:
                    brightness_pct: 90
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ filter_switch }}"
          - stop: "Tryb serwisowy aktywny"

      # --- Dezaktywacja serwisu ---
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'off') }}"
        sequence:
          - variables:
              prev_json: "{{ (states(service_state_text) | from_json) if service_state_text != '' else {} }}"
          - repeat:
              for_each: "{{ lights }}"
              sequence:
                - variables:
                    saved: "{{ prev_json.get(repeat.item.entity, {}) }}"
                - choose:
                    - conditions: "{{ saved.get('on', false) }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ repeat.item.entity }}"
                          data:
                            brightness_pct: "{{ saved.get('brightness', 80) }}"
                    - conditions: "{{ not saved.get('on', false) }}"
                      sequence:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ repeat.item.entity }}"
          - choose:
              - conditions: "{{ filter_switch != '' and prev_json.get('filter', false) }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ filter_switch }}"

  - alias: "Tryb karmienia"
    choose:
      - conditions: "{{ feeding_helper != '' and is_state(feeding_helper, 'on') }}"
        sequence:
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: "{{ filter_switch }}"
          - choose:
              - conditions: "{{ feeding_timer != '' }}"
                sequence:
                  - service: timer.start
                    target:
                      entity_id: "{{ feeding_timer }}"
                    data:
                      duration: "00:{{ '%02d' | format(feeding_duration | int) }}:00"
          - wait_for_trigger:
              - platform: state
                entity_id: !input feeding_helper
                to: "off"
              - platform: event
                event_type: timer.finished
                event_data:
                  entity_id: !input feeding_timer
            timeout:
              minutes: "{{ feeding_duration }}"
            continue_on_timeout: true
  
            timeout:
              minutes: "{{ feeding_duration }}"
            continue_on_timeout: true
          - choose:
              - conditions: "{{ filter_switch != '' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: "{{ filter_switch }}"
          - choose:
              - conditions: "{{ feeding_timer != '' }}"
                sequence:
                  - service: timer.cancel
                    target:
                      entity_id: "{{ feeding_timer }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ feeding_helper }}"

  - alias: "Sterowanie rampami świateł"
    repeat:
      for_each: "{{ lights }}"
      sequence:
        - variables:
            ch: "{{ repeat.item }}"
            on_ts: "{{ as_timestamp(strptime(ch.on_time, '%H:%M:%S')) }}"
            dim_ts: "{{ as_timestamp(strptime(ch.dim_time, '%H:%M:%S')) }}"
            ramp_up_s: "{{ (ch.ramp_up_min | int) * 60 }}"
            ramp_down_s: "{{ (ch.ramp_down_min | int) * 60 }}"
            target_pct: "{{ ch.target_pct | int }}"
            now_ts: "{{ as_timestamp(now().strftime('%H:%M:%S')) }}"
            current_pct: >
              {% if state_attr(ch.entity, 'brightness') is defined %}
                {{ ((state_attr(ch.entity, 'brightness')|int(0))/255*100)|round(0) }}
              {% else %} 0 {% endif %}
        - choose:
            # Rozjaśnianie
            - conditions: "{{ on_ts <= now_ts < on_ts + ramp_up_s }}"
              sequence:
                - variables:
                    elapsed: "{{ now_ts - on_ts }}"
                    pct: "{{ (elapsed / (ramp_up_s / target_pct)) | round(0) }}"
                - choose:
                    - conditions: "{{ pct != current_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ pct }}"
            # Utrzymanie jasności
            - conditions: "{{ on_ts + ramp_up_s <= now_ts < dim_ts }}"
              sequence:
                - choose:
                    - conditions: "{{ current_pct != target_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ target_pct }}"
            # Wygaszanie
            - conditions: "{{ dim_ts <= now_ts < dim_ts + ramp_down_s }}"
              sequence:
                - variables:
                    elapsed: "{{ now_ts - dim_ts }}"
                    pct: "{{ target_pct - (elapsed / (ramp_down_s / target_pct)) | round(0) }}"
                - choose:
                    - conditions: "{{ pct != current_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ [pct, 0]|max }}"
            # Po wygaszeniu
            - conditions: "{{ now_ts >= dim_ts + ramp_down_s }}"
              sequence:
                - choose:
                    - conditions: "{{ is_state(ch.entity, 'on') }}"
                      sequence:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ ch.entity }}"

  - alias: "Kontrola CO₂"
    sequence:
      - variables:
          first_on: "{{ (lights | sort(attribute='on_time') | first).on_time }}"
          last_dim: "{{ (lights | sort(attribute='dim_time') | last).dim_time }}"
          now_dt: "{{ now() }}"
          should_be_on: >
            {% set f = as_datetime(strptime(first_on, '%H:%M:%S')) %}
            {% set l = as_datetime(strptime(last_dim, '%H:%M:%S')) - timedelta(minutes=30) %}
            {{ f <= now_dt < l }}
      - choose:
          - conditions: "{{ co2_switch != '' and should_be_on and not is_state(co2_switch, 'on') }}"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: "{{ co2_switch }}"
          - conditions: "{{ co2_switch != '' and not should_be_on and not is_state(co2_switch, 'off') }}"
            sequence:
              - service: switch.turn_off
                target:
                  entity_id: "{{ co2_switch }}"
                  
