blueprint:
  name: üí° Akwarium ‚Äì O≈õwietlenie + CO‚ÇÇ + Karmienie + Serwis
  description: >
    Pe≈Çny blueprint automatyzacji dla akwarium:
      ‚Ä¢ 4 kana≈Çy o≈õwietlenia z rampami (Bia≈Çy Front, Bia≈Çy Ty≈Ç, Sun, Grow)
      ‚Ä¢ CO‚ÇÇ: w≈ÇƒÖcza siƒô przy najwcze≈õniejszym starcie ≈õwiat≈Ça, wy≈ÇƒÖcza 30 min przed ostatnim wygaszeniem
      ‚Ä¢ Tryb karmienia: wy≈ÇƒÖcza filtr, uruchamia timer, przywraca filtr po zako≈Ñczeniu; rƒôczne przerwanie dzia≈Ça
      ‚Ä¢ Tryb serwisowy: zapisuje stan ≈õwiate≈Ç + filtra do input_text i ustawia ≈õwiat≈Ça na 90% + wy≈ÇƒÖcza filtr
      ‚Ä¢ Wszystkie helpery sƒÖ opcjonalne ‚Äî blueprint zabezpiecza wywo≈Çania us≈Çug gdy input jest pusty
  domain: automation
  author: ChatGPT (GPT-5)
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/akwarium.yaml
  homeassistant:
    min_version: 2024.8.0

  ####################################
  #               INPUTS             #
  ####################################
  input:
    # === Kana≈Ç: Bia≈Çy Front ===
    light_bialy_front:
      name: Bia≈Çy Front (encja light)
      selector:
        entity:
          domain: light
    bf_on_time:
      name: Bia≈Çy Front ‚Äì start rozja≈õniania (HH:MM:SS)
      default: "15:30:00"
      selector:
        time: {}
    bf_ramp_up:
      name: Bia≈Çy Front ‚Äì czas rozja≈õniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    bf_brightness:
      name: Bia≈Çy Front ‚Äì docelowa jasno≈õƒá (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    bf_dim_start:
      name: Bia≈Çy Front ‚Äì start wygaszania (HH:MM:SS)
      default: "21:30:00"
      selector:
        time: {}
    bf_ramp_down:
      name: Bia≈Çy Front ‚Äì czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    # === Kana≈Ç: Bia≈Çy Ty≈Ç ===
    light_bialy_tyl:
      name: Bia≈Çy Ty≈Ç (encja light)
      selector:
        entity:
          domain: light
    bt_on_time:
      name: Bia≈Çy Ty≈Ç ‚Äì start rozja≈õniania
      default: "15:40:00"
      selector:
        time: {}
    bt_ramp_up:
      name: Bia≈Çy Ty≈Ç ‚Äì czas rozja≈õniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    bt_brightness:
      name: Bia≈Çy Ty≈Ç ‚Äì docelowa jasno≈õƒá (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    bt_dim_start:
      name: Bia≈Çy Ty≈Ç ‚Äì start wygaszania
      default: "21:40:00"
      selector:
        time: {}
    bt_ramp_down:
      name: Bia≈Çy Ty≈Ç ‚Äì czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    # === Kana≈Ç: Sun ===
    light_sun:
      name: Sun (encja light)
      selector:
        entity:
          domain: light
    sun_on_time:
      name: Sun ‚Äì start rozja≈õniania
      default: "15:20:00"
      selector:
        time: {}
    sun_ramp_up:
      name: Sun ‚Äì czas rozja≈õniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    sun_brightness:
      name: Sun ‚Äì docelowa jasno≈õƒá (%)
      default: 70
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    sun_dim_start:
      name: Sun ‚Äì start wygaszania
      default: "21:20:00"
      selector:
        time: {}
    sun_ramp_down:
      name: Sun ‚Äì czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    # === Kana≈Ç: Grow ===
    light_grow:
      name: Grow (encja light)
      selector:
        entity:
          domain: light
    grow_on_time:
      name: Grow ‚Äì start rozja≈õniania
      default: "15:10:00"
      selector:
        time: {}
    grow_ramp_up:
      name: Grow ‚Äì czas rozja≈õniania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min
    grow_brightness:
      name: Grow ‚Äì docelowa jasno≈õƒá (%)
      default: 85
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    grow_dim_start:
      name: Grow ‚Äì start wygaszania
      default: "21:10:00"
      selector:
        time: {}
    grow_ramp_down:
      name: Grow ‚Äì czas wygaszania (min)
      default: 30
      selector:
        number:
          min: 1
          max: 240
          unit_of_measurement: min

    # === CO‚ÇÇ i filtr ===
    co2_switch:
      name: (opcjonalny) Prze≈ÇƒÖcznik CO‚ÇÇ (switch)
      default: ""
      selector:
        entity:
          domain: switch
    filter_switch:
      name: (opcjonalny) Filtr akwariowy (switch)
      default: ""
      selector:
        entity:
          domain: switch

    # === Helpery ===
    feeding_helper:
      name: (opcjonalny) Helper ‚Äì Tryb karmienia (input_boolean)
      default: ""
      selector:
        entity:
          domain: input_boolean
    feeding_timer:
      name: (opcjonalny) Timer ‚Äì karmienie (timer)
      default: ""
      selector:
        entity:
          domain: timer
    feeding_duration:
      name: Czas karmienia (minuty)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          unit_of_measurement: min
    service_mode_helper:
      name: (opcjonalny) Helper ‚Äì Tryb serwisowy (input_boolean)
      default: ""
      selector:
        entity:
          domain: input_boolean
    service_state_text:
      name: (opcjonalny) Bufor stanu (input_text)
      default: ""
      selector:
        entity:
          domain: input_text

# ---------------------------
# Mode i max_exceeded
# ---------------------------
mode: restart
max_exceeded: silent

# ---------------------------
# Triggery
# (u≈ºywamy tylko bezpiecznych trigger√≥w)
# ---------------------------
trigger:
  - platform: time_pattern
    seconds: "/30"            # aktualizacja ramp co 30 sekund
  - platform: homeassistant
    event: start              # restart HA (dalej op√≥≈∫niamy w akcji)
  - platform: event
    event_type: timer.finished
    # event_data.entity_id mo≈ºe zostaƒá podane przez !input podczas tworzenia automatyzacji
    event_data:
      entity_id: !input feeding_timer

# ---------------------------
# Zmienne globalne (u≈ÇatwiajƒÖ czytelno≈õƒá)
# ---------------------------
variables:
  lights:
    - id: bf
      name: "Bia≈Çy Front"
      entity: !input light_bialy_front
      on_time: !input bf_on_time
      ramp_up_min: !input bf_ramp_up
      target_pct: !input bf_brightness
      dim_time: !input bf_dim_start
      ramp_down_min: !input bf_ramp_down
    - id: bt
      name: "Bia≈Çy Ty≈Ç"
      entity: !input light_bialy_tyl
      on_time: !input bt_on_time
      ramp_up_min: !input bt_ramp_up
      target_pct: !input bt_brightness
      dim_time: !input bt_dim_start
      ramp_down_min: !input bt_ramp_down
    - id: sun
      name: "Sun"
      entity: !input light_sun
      on_time: !input sun_on_time
      ramp_up_min: !input sun_ramp_up
      target_pct: !input sun_brightness
      dim_time: !input sun_dim_start
      ramp_down_min: !input sun_ramp_down
    - id: grow
      name: "Grow"
      entity: !input light_grow
      on_time: !input grow_on_time
      ramp_up_min: !input grow_ramp_up
      target_pct: !input grow_brightness
      dim_time: !input grow_dim_start
      ramp_down_min: !input grow_ramp_down

  co2_switch: !input co2_switch
  filter_switch: !input filter_switch
  feeding_helper: !input feeding_helper
  feeding_timer: !input feeding_timer
  feeding_duration: !input feeding_duration
  service_mode_helper: !input service_mode_helper
  service_state_text: !input service_state_text

# ---------------------------
# Akcje
# ---------------------------
action:

  ####################################
  # 0) Op√≥≈∫nienie po starcie HA (10s)
  ####################################
  - alias: "Delay po starcie HA"
    choose:
      - conditions: "{{ trigger.platform == 'homeassistant' }}"
        sequence:
          - delay: "00:00:10"

  ####################################
  # 1) Tryb serwisowy ‚Äî zapis / tryb serwisowy / przywr√≥cenie
  ####################################
  - alias: "Tryb serwisowy"
    choose:
      # --- W≈ÇƒÖczenie trybu serwisowego: zapis stan√≥w, ustawienie ≈õwiate≈Ç 90% i wy≈ÇƒÖczenie filtra ---
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'on') }}"
        sequence:
          # przygotowanie JSON z aktualnymi stanami
          - variables:
              saved_states: >
                {% set s = {} %}
                {% for l in lights %}
                  {% set b = (state_attr(l.entity, 'brightness') | int(0)) %}
                  {% set pct = (b / 255 * 100) | round(0) if b else 0 %}
                  {% set _ = s.update({ l.entity: {'on': is_state(l.entity,'on'), 'brightness': pct } }) %}
                {% endfor %}
                {% if co2_switch != '' %}
                  {% set _ = s.update({'co2': is_state(co2_switch,'on')}) %}
                {% endif %}
                {% if filter_switch != '' %}
                  {% set _ = s.update({'filter': is_state(filter_switch,'on')}) %}
                {% endif %}
                {{ s | to_json }}
          # zapis do input_text, je≈õli skonfigurowano
          - choose:
              - conditions: "{{ service_state_text != '' }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input service_state_text
                    data:
                      value: "{{ saved_states }}"
          # ustawiamy wszystkie ≈õwiat≈Ça na 90% (je≈õli encja zadeklarowana)
          - repeat:
              for_each: "{{ lights }}"
              sequence:
                - choose:
                    - conditions: "{{ repeat.item.entity != '' }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ repeat.item.entity }}"
                          data:
                            brightness_pct: 90
          # wy≈ÇƒÖczamy filtr je≈õli jest skonfigurowany i jest ON
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input filter_switch
          - stop: "Tryb serwisowy aktywny ‚Äî przerywam dalsze kroki."

      # --- Wy≈ÇƒÖczenie trybu serwisowego: przywr√≥cenie zapisanych stan√≥w ---
      - conditions: "{{ service_mode_helper != '' and is_state(service_mode_helper, 'off') }}"
        sequence:
          - variables:
              prev_json: "{{ (states(service_state_text) | from_json) if service_state_text != '' else {} }}"
          - repeat:
              for_each: "{{ lights }}"
              sequence:
                - variables:
                    saved: "{{ prev_json.get(repeat.item.entity, {}) }}"
                - choose:
                    - conditions: "{{ saved.get('on', false) }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ repeat.item.entity }}"
                          data:
                            brightness_pct: "{{ saved.get('brightness', 80) }}"
                    - conditions: "{{ not saved.get('on', false) }}"
                      sequence:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ repeat.item.entity }}"
          - choose:
              - conditions: "{{ filter_switch != '' and prev_json.get('filter', false) }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input filter_switch
          - choose:
              - conditions: "{{ co2_switch != '' and prev_json.get('co2', false) }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input co2_switch

  ####################################
  # 2) Tryb karmienia
  ####################################
  - alias: "Tryb karmienia"
    choose:
      - conditions: "{{ feeding_helper != '' and is_state(feeding_helper, 'on') }}"
        sequence:
          # Wy≈ÇƒÖcz filtr (je≈õli zadeklarowany i jest ON)
          - choose:
              - conditions: "{{ filter_switch != '' and is_state(filter_switch, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input filter_switch
          # Start timera (je≈õli zadeklarowany)
          - choose:
              - conditions: "{{ feeding_timer != '' }}"
                sequence:
                  - service: timer.start
                    target:
                      entity_id: !input feeding_timer
                    data:
                      duration: "00:{{ '%02d' | format(feeding_duration | int) }}:00"
          # Czekamy albo na wy≈ÇƒÖczenie helpera, albo na zako≈Ñczenie timera
          - wait_for_trigger:
              - platform: state
                entity_id: !input feeding_helper
                to: "off"
              - platform: event
                event_type: timer.finished
                event_data:
                  entity_id: !input feeding_timer
            timeout:
              minutes: "{{ feeding_duration }}"
            continue_on_timeout: true
          # Po zako≈Ñczeniu: przywr√≥ƒá filtr (je≈õli skonfigurowany)
          - choose:
              - conditions: "{{ filter_switch != '' }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input filter_switch
          # Anuluj timer (je≈õli skonfigurowany)
          - choose:
              - conditions: "{{ feeding_timer != '' }}"
                sequence:
                  - service: timer.cancel
                    target:
                      entity_id: !input feeding_timer
          # Wy≈ÇƒÖcz helper karmienia (upewnij siƒô, ≈ºe nie wywo≈Çujemy pustej encji)
          - choose:
              - conditions: "{{ feeding_helper != '' }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: !input feeding_helper

  ####################################
  # 3) Sterowanie rampami ≈õwiate≈Ç
  ####################################
  - alias: "Sterowanie rampami ≈õwiate≈Ç"
    repeat:
      for_each: "{{ lights }}"
      sequence:
        - variables:
            ch: "{{ repeat.item }}"
            on_ts: "{{ as_timestamp(strptime(ch.on_time, '%H:%M:%S')) }}"
            dim_ts: "{{ as_timestamp(strptime(ch.dim_time, '%H:%M:%S')) }}"
            ramp_up_s: "{{ (ch.ramp_up_min | int) * 60 }}"
            ramp_down_s: "{{ (ch.ramp_down_min | int) * 60 }}"
            target_pct: "{{ (ch.target_pct | int) if (ch.target_pct|int) > 0 else 1 }}"
            now_ts: "{{ as_timestamp(now()) }}"
            current_pct: >
              {% if state_attr(ch.entity, 'brightness') is defined %}
                {{ ((state_attr(ch.entity,'brightness')|int(0))/255*100)|round(0) }}
              {% else %}
                0
              {% endif %}
        - choose:
            # Rozja≈õnianie
            - conditions: >
                {{ now_ts >= on_ts and now_ts < (on_ts + ramp_up_s) }}
              sequence:
                - variables:
                    elapsed: "{{ now_ts - on_ts }}"
                    seconds_per_pct: "{{ ramp_up_s / target_pct }}"
                    pct_calc: "{{ (elapsed / seconds_per_pct) | round(0) | int }}"
                    pct_final: "{{ [pct_calc, target_pct] | min }}"
                - choose:
                    - conditions: "{{ pct_final != current_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ pct_final }}"
            # Utrzymanie docelowego poziomu
            - conditions: >
                {{ now_ts >= (on_ts + ramp_up_s) and now_ts < dim_ts }}
              sequence:
                - choose:
                    - conditions: "{{ current_pct != target_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ target_pct }}"
            # Wygaszanie
            - conditions: >
                {{ now_ts >= dim_ts and now_ts < (dim_ts + ramp_down_s) }}
              sequence:
                - variables:
                    elapsed_down: "{{ now_ts - dim_ts }}"
                    seconds_per_pct_down: "{{ ramp_down_s / target_pct }}"
                    dec: "{{ (elapsed_down / seconds_per_pct_down) | round(0) | int }}"
                    pct_calc: "{{ (target_pct - dec) | round(0) | int }}"
                    pct_final: "{{ [pct_calc, 0] | max }}"
                - choose:
                    - conditions: "{{ pct_final != current_pct }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ ch.entity }}"
                          data:
                            brightness_pct: "{{ pct_final }}"
            # Po wygaszeniu ‚Äî wy≈ÇƒÖcz ≈õwiat≈Ço
            - conditions: >
                {{ now_ts >= (dim_ts + ramp_down_s) }}
              sequence:
                - choose:
                    - conditions: "{{ is_state(ch.entity, 'on') }}"
                      sequence:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ ch.entity }}"

  ####################################
  # 4) Kontrola CO‚ÇÇ
  ####################################
  - alias: "Kontrola CO‚ÇÇ"
    sequence:
      - variables:
          first_on: "{{ (lights | sort(attribute='on_time') | first).on_time if lights|length>0 else '00:00:00' }}"
          last_dim: "{{ (lights | sort(attribute='dim_time') | last).dim_time if lights|length>0 else '23:59:00' }}"
          now_dt: "{{ now() }}"
          should_be_on: >
            {% set f = as_datetime(strptime(first_on, '%H:%M:%S')) %}
            {% set l = as_datetime(strptime(last_dim, '%H:%M:%S')) - timedelta(minutes=30) %}
            {{ f <= now_dt < l }}
      - choose:
          - conditions: "{{ co2_switch != '' and should_be_on and not is_state(co2_switch, 'on') }}"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: !input co2_switch
          - conditions: "{{ co2_switch != '' and (not should_be_on) and is_state(co2_switch, 'on') }}"
            sequence:
              - service: switch.turn_off
                target:
                  entity_id: !input co2_switch

# koniec blueprinta
