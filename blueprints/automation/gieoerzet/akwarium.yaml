blueprint:
  name: Akwarium – Oświetlenie, CO₂, Karmienie i Serwis
  description: |
    🌊 Kompletny blueprint do sterowania akwarium.
    Obsługuje 4 kanały oświetlenia, CO₂, karmienie, tryb serwisowy
    oraz kontynuację rampy po restarcie Home Assistanta (z opóźnieniem 10 s).
    Wszystkie sekcje są opcjonalne — brak encji = brak akcji.
  domain: automation
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/blueprints/automation/gieoerzet/akwarium.yaml

  input:
    light_front:
      name: 💡 Biały Front
      selector:
        entity: { domain: light }
    light_back:
      name: 💡 Biały Tył (opcjonalny)
      default: null
      selector:
        entity: { domain: light }
    light_sun:
      name: 💡 Sun (opcjonalny)
      default: null
      selector:
        entity: { domain: light }
    light_grow:
      name: 💡 Grow (opcjonalny)
      default: null
      selector:
        entity: { domain: light }

    front_start_time: { name: ⏰ Start rozjaśniania – Front, default: "15:30:00", selector: { time: {} } }
    front_target_pct: { name: 🎚️ Docelowa jasność – Front (%), default: 80, selector: { number: { min: 0, max: 100 } } }
    front_ramp_minutes: { name: 🕒 Czas rozjaśniania – Front (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    front_dim_time: { name: 🌙 Start ściemniania – Front, default: "21:30:00", selector: { time: {} } }
    front_dim_minutes: { name: 🌙 Czas ściemniania – Front (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    back_start_time: { name: ⏰ Start rozjaśniania – Tył, default: "15:30:00", selector: { time: {} } }
    back_target_pct: { name: 🎚️ Docelowa jasność – Tył (%), default: 80, selector: { number: { min: 0, max: 100 } } }
    back_ramp_minutes: { name: 🕒 Czas rozjaśniania – Tył (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    back_dim_time: { name: 🌙 Start ściemniania – Tył, default: "21:30:00", selector: { time: {} } }
    back_dim_minutes: { name: 🌙 Czas ściemniania – Tył (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    sun_start_time: { name: ⏰ Start rozjaśniania – Sun, default: "15:30:00", selector: { time: {} } }
    sun_target_pct: { name: 🎚️ Docelowa jasność – Sun (%), default: 70, selector: { number: { min: 0, max: 100 } } }
    sun_ramp_minutes: { name: 🕒 Czas rozjaśniania – Sun (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    sun_dim_time: { name: 🌙 Start ściemniania – Sun, default: "21:30:00", selector: { time: {} } }
    sun_dim_minutes: { name: 🌙 Czas ściemniania – Sun (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    grow_start_time: { name: ⏰ Start rozjaśniania – Grow, default: "15:30:00", selector: { time: {} } }
    grow_target_pct: { name: 🎚️ Docelowa jasność – Grow (%), default: 85, selector: { number: { min: 0, max: 100 } } }
    grow_ramp_minutes: { name: 🕒 Czas rozjaśniania – Grow (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    grow_dim_time: { name: 🌙 Start ściemniania – Grow, default: "21:30:00", selector: { time: {} } }
    grow_dim_minutes: { name: 🌙 Czas ściemniania – Grow (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    co2_switch: { name: 💨 Przełącznik CO₂ (opcjonalny), default: null, selector: { entity: { domain: switch } } }
    filter_switch: { name: 💧 Przełącznik Filtra (opcjonalny), default: null, selector: { entity: { domain: switch } } }
    feeding_switch: { name: 🍽️ Przełącznik Karmienia (opcjonalny), default: null, selector: { entity: { domain: input_boolean } } }
    feeding_timer: { name: ⏳ Timer Karmienia (opcjonalny), default: null, selector: { entity: { domain: timer } } }
    feeding_duration: { name: ⏱️ Czas Karmienia (min), default: 60, selector: { number: { min: 1, max: 120 } } }
    service_switch: { name: 🔧 Tryb Serwisowy (opcjonalny), default: null, selector: { entity: { domain: input_boolean } } }
    memory_text: { name: 💾 Pamięć Stanu (opcjonalny), default: null, selector: { entity: { domain: input_text } } }

trigger:
  - platform: time
    at:
      - !input front_start_time
      - !input front_dim_time
      - !input back_start_time
      - !input back_dim_time
      - !input sun_start_time
      - !input sun_dim_time
      - !input grow_start_time
      - !input grow_dim_time
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: [!input feeding_switch, !input service_switch]
  - platform: event
    event_type: timer.finished
    event_data: { entity_id: !input feeding_timer }

variables:
  lights: { front: !input light_front, back: !input light_back, sun: !input light_sun, grow: !input light_grow }
  co2: !input co2_switch
  filter: !input filter_switch
  feed: !input feeding_switch
  feed_timer: !input feeding_timer
  feed_duration: !input feeding_duration
  service: !input service_switch
  memory: !input memory_text

mode: restart

action:
  - choose:
      - conditions: "{{ trigger.platform == 'homeassistant' }}"
        sequence:
          - delay: "00:00:10"
          - service: persistent_notification.create
            data: { title: "⚙️ Blueprint Akwarium uruchomiony", message: "Oczekiwanie na zdarzenia." }

      - conditions: "{{ trigger.platform == 'time' }}"
        sequence:
          - repeat:
              for_each:
                - { entity: !input light_front, start: !input front_start_time, target: !input front_target_pct, ramp: !input front_ramp_minutes, dim_start: !input front_dim_time, dim_ramp: !input front_dim_minutes }
                - { entity: !input light_back, start: !input back_start_time, target: !input back_target_pct, ramp: !input back_ramp_minutes, dim_start: !input back_dim_time, dim_ramp: !input back_dim_minutes }
                - { entity: !input light_sun, start: !input sun_start_time, target: !input sun_target_pct, ramp: !input sun_ramp_minutes, dim_start: !input sun_dim_time, dim_ramp: !input sun_dim_minutes }
                - { entity: !input light_grow, start: !input grow_start_time, target: !input grow_target_pct, ramp: !input grow_ramp_minutes, dim_start: !input grow_dim_time, dim_ramp: !input grow_dim_minutes }
              sequence:
                - if: "{{ repeat.item.entity != None }}"
                  then:
                    - choose:
                        - conditions: "{{ trigger.now == repeat.item.start }}"
                          sequence:
                            - variables:
                                delay_s: "{{ (repeat.item.ramp|int * 60 / (repeat.item.target|int if repeat.item.target|int > 0 else 1)) | int }}"
                            - repeat:
                                while: >
                                  {{ repeat.index <= repeat.item.target|int and now().strftime('%H:%M:%S') < repeat.item.dim_start }}
                                sequence:
                                  - service: light.turn_on
                                    target: { entity_id: "{{ repeat.item.entity }}" }
                                    data: { brightness_step_pct: 1 }
                                  - delay: { seconds: "{{ delay_s }}" }
                        - conditions: "{{ trigger.now == repeat.item.dim_start }}"
                          sequence:
                            - variables:
                                delay_s: "{{ (repeat.item.dim_ramp|int * 60 / (repeat.item.target|int if repeat.item.target|int > 0 else 1)) | int }}"
                            - repeat:
                                count: "{{ repeat.item.target|int }}"
                                sequence:
                                  - service: light.turn_on
                                    target: { entity_id: "{{ repeat.item.entity }}" }
                                    data: { brightness_step_pct: -1 }
                                  - delay: { seconds: "{{ delay_s }}" }
                            - service: light.turn_off
                              target: { entity_id: "{{ repeat.item.entity }}" }
