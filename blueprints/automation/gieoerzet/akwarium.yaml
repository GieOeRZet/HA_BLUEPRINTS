# =====================================================================
# 🌊 Home Assistant Blueprint: Akwarium – Oświetlenie, CO₂, Karmienie i Serwis
# Autor: GieOeRZet
# Wersja: 2025.10.19
# Opis:
#   Kompletny blueprint do automatyzacji akwarium.
#   Sterowanie oświetleniem (4 kanały), CO₂, filtrem, trybem karmienia i serwisowym.
#   Obsługuje płynne rampy jasności, automatyczne wyłączenie CO₂,
#   tryb serwisowy z pamięcią stanu (jasność + on/off) i restart z opóźnieniem.
#
# Repozytorium:
#   https://github.com/GieOeRZet/akwarium
#
# Licencja: MIT
# =====================================================================

blueprint:
  name: 🌊 Akwarium – Oświetlenie, CO₂, Karmienie i Serwis
  description: |
    Kompletny blueprint do automatyzacji akwarium.
    Sterowanie oświetleniem (4 kanały), CO₂, filtrem, trybem karmienia i serwisowym.
    Obsługuje płynne rampy rozjaśniania/ściemniania z kontynuacją po restarcie.
    Wszystkie sekcje są opcjonalne — brak encji = brak akcji.
  domain: automation
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/blueprints/automation/gieoerzet/akwarium.yaml

  input:
    # --- Sekcja I: OŚWIETLENIE ---
    light_front:
      name: 💡 Biały Front (wymagany)
      selector: { entity: { domain: light } }

    light_back:
      name: 💡 Biały Tył (opcjonalny)
      default: null
      selector: { entity: { domain: light } }

    light_sun:
      name: ☀️ Sun (opcjonalny)
      default: null
      selector: { entity: { domain: light } }

    light_grow:
      name: 🌿 Grow (opcjonalny)
      default: null
      selector: { entity: { domain: light } }

    # --- Harmonogram kanałów ---
    front_start_time: { name: 🕒 Start rozjaśniania – Front, default: "15:30:00", selector: { time: {} } }
    front_target_pct: { name: 🎚️ Jasność docelowa – Front (%), default: 80, selector: { number: { min: 0, max: 100 } } }
    front_ramp_minutes: { name: ⏱️ Czas rozjaśniania – Front (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    front_dim_time: { name: 🌙 Start ściemniania – Front, default: "21:30:00", selector: { time: {} } }
    front_dim_minutes: { name: ⏱️ Czas ściemniania – Front (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    back_start_time: { name: 🕒 Start rozjaśniania – Tył, default: "15:30:00", selector: { time: {} } }
    back_target_pct: { name: 🎚️ Jasność docelowa – Tył (%), default: 80, selector: { number: { min: 0, max: 100 } } }
    back_ramp_minutes: { name: ⏱️ Czas rozjaśniania – Tył (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    back_dim_time: { name: 🌙 Start ściemniania – Tył, default: "21:30:00", selector: { time: {} } }
    back_dim_minutes: { name: ⏱️ Czas ściemniania – Tył (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    sun_start_time: { name: 🕒 Start rozjaśniania – Sun, default: "15:30:00", selector: { time: {} } }
    sun_target_pct: { name: 🎚️ Jasność docelowa – Sun (%), default: 70, selector: { number: { min: 0, max: 100 } } }
    sun_ramp_minutes: { name: ⏱️ Czas rozjaśniania – Sun (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    sun_dim_time: { name: 🌙 Start ściemniania – Sun, default: "21:30:00", selector: { time: {} } }
    sun_dim_minutes: { name: ⏱️ Czas ściemniania – Sun (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    grow_start_time: { name: 🕒 Start rozjaśniania – Grow, default: "15:30:00", selector: { time: {} } }
    grow_target_pct: { name: 🎚️ Jasność docelowa – Grow (%), default: 85, selector: { number: { min: 0, max: 100 } } }
    grow_ramp_minutes: { name: ⏱️ Czas rozjaśniania – Grow (min), default: 30, selector: { number: { min: 1, max: 240 } } }
    grow_dim_time: { name: 🌙 Start ściemniania – Grow, default: "21:30:00", selector: { time: {} } }
    grow_dim_minutes: { name: ⏱️ Czas ściemniania – Grow (min), default: 30, selector: { number: { min: 1, max: 240 } } }

    # --- Sekcja II: CO₂ i filtr ---
    co2_switch: { name: 💨 Przełącznik CO₂ (opcjonalny), default: null, selector: { entity: { domain: switch } } }
    filter_switch: { name: 💧 Przełącznik Filtra (opcjonalny), default: null, selector: { entity: { domain: switch } } }

    # --- Sekcja III: Karmienie i Serwis ---
    feeding_switch: { name: 🍽️ Przełącznik Karmienia (opcjonalny), default: null, selector: { entity: { domain: input_boolean } } }
    feeding_timer: { name: ⏳ Timer Karmienia (opcjonalny), default: null, selector: { entity: { domain: timer } } }
    feeding_duration: { name: ⏱️ Czas Karmienia (min), default: 60, selector: { number: { min: 1, max: 120 } } }
    service_switch: { name: 🔧 Tryb Serwisowy (opcjonalny), default: null, selector: { entity: { domain: input_boolean } } }
    memory_text: { name: 💾 Pamięć Stanu (opcjonalny), default: null, selector: { entity: { domain: input_text } } }

trigger:
  - platform: homeassistant
    event: start
  - platform: state
    entity_id:
      - !input feeding_switch
      - !input service_switch
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input feeding_timer

variables:
  lights:
    front: !input light_front
    back: !input light_back
    sun: !input light_sun
    grow: !input light_grow
  filter: !input filter_switch
  feed: !input feeding_switch
  feed_timer: !input feeding_timer
  feed_duration: !input feeding_duration
  service: !input service_switch
  memory: !input memory_text

mode: restart

action:
  - choose:
      # --- ⏱️ Restart HA ---
      - conditions: "{{ trigger.platform == 'homeassistant' }}"
        sequence:
          - delay: "00:00:10"
          - service: persistent_notification.create
            data:
              title: "⚙️ Blueprint Akwarium uruchomiony"
              message: "Home Assistant gotowy – automatyzacje wznowione."

      # --- 🍽️ Tryb karmienia ---
      - conditions:
          - "{{ feed is not none }}"
          - condition: template
            value_template: "{{ trigger.entity_id == feed }}"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input feeding_switch
                    state: "on"
                sequence:
                  - service: persistent_notification.create
                    data:
                      title: "🍽️ Tryb karmienia aktywny"
                      message: "Filtr wyłączony na {{ feed_duration }} minut."
                  - if: "{{ filter is not none }}"
                    then:
                      - service: switch.turn_off
                        target: { entity_id: "{{ filter }}" }
                  - if: "{{ feed_timer is not none }}"
                    then:
                      - service: timer.start
                        target: { entity_id: "{{ feed_timer }}" }
                        data: { duration: "{{ (feed_duration|int * 60)|int }}" }

              - conditions:
                  - condition: state
                    entity_id: !input feeding_switch
                    state: "off"
                sequence:
                  - if: "{{ filter is not none }}"
                    then:
                      - service: switch.turn_on
                        target: { entity_id: "{{ filter }}" }
                  - if: "{{ feed_timer is not none }}"
                    then:
                      - service: timer.cancel
                        target: { entity_id: "{{ feed_timer }}" }
                  - service: persistent_notification.create
                    data:
                      title: "🍽️ Karmienie zakończone"
                      message: "Filtr ponownie włączony."
