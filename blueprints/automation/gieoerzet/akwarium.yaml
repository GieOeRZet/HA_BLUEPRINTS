# =====================================================================
# 🌊 Home Assistant Blueprint: Akwarium – Oświetlenie, CO₂ i Karmienie
# Autor: GieOeRZet
# Wersja: 2025.02.UI1 (FINAL – odświeżony interfejs)
# Repozytorium: https://github.com/GieOeRZet/akwarium
# Licencja: MIT
# =====================================================================

blueprint:
  name: 🌊 Akwarium – Oświetlenie, CO₂ i Karmienie
  description: |
    Kompletny blueprint do automatyzacji akwarium w Home Assistant.
    🐠 Steruje rampami oświetlenia (Shelly RGBW2 – 4 kanały), CO₂, filtrem i karmieniem.
    ⚙️ Posiada pełną kompensację ramp po restarcie Home Assistant i aktualizację co minutę.
    📘 Dokumentacja i wykresy ramp: [GitHub – GieOeRZet / akwarium](https://github.com/GieOeRZet/akwarium)
  domain: automation
  source_url: https://github.com/GieOeRZet/akwarium/blob/main/blueprints/automation/gieoerzet/akwarium.yaml

  input:
    # ================================================================
    # 💡 OŚWIETLENIE – FRONT
    # ================================================================
    header_front:
      name: "💡 ——— Kanał 1: Front ———"
      default: ""
      selector: { text: {} }

    light_front:
      name: 💡 Światło Front
      description: "Główne przednie światło akwarium (kanał 1 – wymagane)."
      selector: { entity: { domain: light } }

    front_start_time:
      name: 🕒 Start rozjaśniania
      description: "Godzina rozpoczęcia rampy rozjaśniania dla światła Front."
      default: "15:30:00"
      selector: { time: {} }

    front_target_pct:
      name: 🎚️ Jasność docelowa
      description: "Docelowa jasność po zakończeniu rampy rozjaśniania (%)."
      default: 80
      selector: { number: { min: 0, max: 100 } }

    front_ramp_minutes:
      name: ⏱️ Czas rozjaśniania
      description: "Długość rampy rozjaśniania (w minutach)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    front_dim_time:
      name: 🌙 Start ściemniania
      description: "Godzina rozpoczęcia rampy ściemniania dla światła Front."
      default: "21:30:00"
      selector: { time: {} }

    front_dim_minutes:
      name: ⏱️ Czas ściemniania
      description: "Długość rampy ściemniania (w minutach)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    # ================================================================
    # 💡 OŚWIETLENIE – BACK
    # ================================================================
    header_back:
      name: "💡 ——— Kanał 2: Back ———"
      default: ""
      selector: { text: {} }

    light_back:
      name: 💡 Światło Tył
      description: "Drugie światło akwarium (kanał 2 – opcjonalne)."
      default: null
      selector: { entity: { domain: light } }

    back_start_time:
      name: 🕒 Start rozjaśniania
      description: "Godzina rozpoczęcia rampy rozjaśniania dla światła Back."
      default: "15:30:00"
      selector: { time: {} }

    back_target_pct:
      name: 🎚️ Jasność docelowa
      description: "Docelowa jasność dla światła Back (%)."
      default: 80
      selector: { number: { min: 0, max: 100 } }

    back_ramp_minutes:
      name: ⏱️ Czas rozjaśniania
      description: "Długość rampy rozjaśniania (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    back_dim_time:
      name: 🌙 Start ściemniania
      description: "Godzina rozpoczęcia rampy ściemniania."
      default: "21:30:00"
      selector: { time: {} }

    back_dim_minutes:
      name: ⏱️ Czas ściemniania
      description: "Długość rampy ściemniania (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    # ================================================================
    # ☀️ OŚWIETLENIE – SUN
    # ================================================================
    header_sun:
      name: "☀️ ——— Kanał 3: Sun ———"
      default: ""
      selector: { text: {} }

    light_sun:
      name: ☀️ Światło Sun
      description: "Trzecie światło (kanał 3 – opcjonalne, symuluje promienie słoneczne)."
      default: null
      selector: { entity: { domain: light } }

    sun_start_time:
      name: 🕒 Start rozjaśniania
      description: "Godzina rozpoczęcia rampy rozjaśniania dla światła Sun."
      default: "15:30:00"
      selector: { time: {} }

    sun_target_pct:
      name: 🎚️ Jasność docelowa
      description: "Docelowa jasność dla światła Sun (%)."
      default: 70
      selector: { number: { min: 0, max: 100 } }

    sun_ramp_minutes:
      name: ⏱️ Czas rozjaśniania
      description: "Czas rampy rozjaśniania dla Sun (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    sun_dim_time:
      name: 🌙 Start ściemniania
      description: "Godzina rozpoczęcia rampy ściemniania dla Sun."
      default: "21:30:00"
      selector: { time: {} }

    sun_dim_minutes:
      name: ⏱️ Czas ściemniania
      description: "Czas rampy ściemniania (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    # ================================================================
    # 🌿 OŚWIETLENIE – GROW
    # ================================================================
    header_grow:
      name: "🌿 ——— Kanał 4: Grow ———"
      default: ""
      selector: { text: {} }

    light_grow:
      name: 🌿 Światło Grow
      description: "Czwarte światło (kanał 4 – opcjonalne, wspomaga wzrost roślin)."
      default: null
      selector: { entity: { domain: light } }

    grow_start_time:
      name: 🕒 Start rozjaśniania
      description: "Godzina rozpoczęcia rampy rozjaśniania dla światła Grow."
      default: "15:30:00"
      selector: { time: {} }

    grow_target_pct:
      name: 🎚️ Jasność docelowa
      description: "Docelowa jasność światła Grow (%)."
      default: 85
      selector: { number: { min: 0, max: 100 } }

    grow_ramp_minutes:
      name: ⏱️ Czas rozjaśniania
      description: "Czas rampy rozjaśniania (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    grow_dim_time:
      name: 🌙 Start ściemniania
      description: "Godzina rozpoczęcia rampy ściemniania dla Grow."
      default: "21:30:00"
      selector: { time: {} }

    grow_dim_minutes:
      name: ⏱️ Czas ściemniania
      description: "Czas rampy ściemniania (minuty)."
      default: 30
      selector: { number: { min: 1, max: 240 } }

    # ================================================================
    # 💨 CO₂ / 💧 FILTR / 🍽️ KARMIENIE
    # ================================================================
    header_other:
      name: "⚙️ ——— Pozostałe funkcje ———"
      default: ""
      selector: { text: {} }

    co2_switch:
      name: 💨 CO₂
      description: "Przełącznik zaworu CO₂ (opcjonalny). Włącza się przy starcie ramp i wyłącza 30 minut przed ściemnianiem."
      default: null
      selector: { entity: { domain: switch } }

    filter_switch:
      name: 💧 Filtr
      description: "Steruje filtrem akwarium. Wyłączany automatycznie podczas karmienia."
      default: null
      selector: { entity: { domain: switch } }

    feeding_switch:
      name: 🍽️ Karmienie
      description: "Przełącznik (input_boolean) uruchamiający tryb karmienia. Wyłącza filtr i startuje timer."
      default: null
      selector: { entity: { domain: input_boolean } }

    feeding_timer:
      name: ⏳ Timer karmienia
      description: "Timer kontrolujący długość karmienia. Po zakończeniu włącza filtr i wyłącza karmienie."
      default: null
      selector: { entity: { domain: timer } }

    feeding_duration:
      name: ⏱️ Czas karmienia (min)
      description: "Czas trwania karmienia w minutach (domyślnie 60)."
      default: 60
      selector: { number: { min: 1, max: 120 } }

# -------------------- WYZWALACZE ------------------------------------
trigger:
  - platform: homeassistant
    event: start
  - platform: time_pattern
    minutes: "/1"
  - platform: state
    entity_id: !input feeding_switch
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input feeding_timer

# -------------------- ZMIENNE ---------------------------------------
variables:
  lights:
    front: !input light_front
    back: !input light_back
    sun: !input light_sun
    grow: !input light_grow
  co2: !input co2_switch
  filter: !input filter_switch
  feed: !input feeding_switch
  feed_timer: !input feeding_timer
  feed_duration: !input feeding_duration

mode: restart

# -------------------- AKCJE -----------------------------------------
action:
  - choose:
      # --- ⚙️ Kompensacja i rampy co minutę -------------------------
      - conditions: "{{ trigger.platform == 'homeassistant' or trigger.platform == 'time_pattern' }}"
        sequence:
          - repeat:
              for_each:
                - { entity: "{{ lights.front }}", start: !input front_start_time, target: !input front_target_pct, ramp: !input front_ramp_minutes, dim: !input front_dim_time, dim_ramp: !input front_dim_minutes }
                - { entity: "{{ lights.back }}", start: !input back_start_time, target: !input back_target_pct, ramp: !input back_ramp_minutes, dim: !input back_dim_time, dim_ramp: !input back_dim_minutes }
                - { entity: "{{ lights.sun }}", start: !input sun_start_time, target: !input sun_target_pct, ramp: !input sun_ramp_minutes, dim: !input sun_dim_time, dim_ramp: !input sun_dim_minutes }
                - { entity: "{{ lights.grow }}", start: !input grow_start_time, target: !input grow_target_pct, ramp: !input grow_ramp_minutes, dim: !input grow_dim_time, dim_ramp: !input grow_dim_minutes }
              sequence:
                - if: "{{ repeat.item.entity is not none }}"
                  then:
                    - variables:
                        now_ts: "{{ as_timestamp(now()) }}"
                        start_ts: "{{ as_timestamp(as_datetime(now().strftime('%Y-%m-%dT' ~ repeat.item.start))) }}"
                        ramp_end: "{{ start_ts + repeat.item.ramp|int * 60 }}"
                        dim_ts: "{{ as_timestamp(as_datetime(now().strftime('%Y-%m-%dT' ~ repeat.item.dim))) }}"
                        dim_end: "{{ dim_ts + repeat.item.dim_ramp|int * 60 }}"
                    - choose:
                        - conditions: "{{ start_ts <= now_ts <= ramp_end }}"
                          sequence:
                            - variables:
                                elapsed: "{{ (now_ts - start_ts) / 60 }}"
                                pct: "{{ (elapsed / repeat.item.ramp|float) * repeat.item.target|float | round(1) }}"
                            - service: light.turn_on
                              target: { entity_id: "{{ repeat.item.entity }}" }
                              data: { brightness_pct: "{{ [pct, repeat.item.target]|min }}" }
                        - conditions: "{{ dim_ts <= now_ts <= dim_end }}"
                          sequence:
                            - variables:
                                elapsed_dim: "{{ (now_ts - dim_ts) / 60 }}"
                                pct: "{{ repeat.item.target|float - ((elapsed_dim / repeat.item.dim_ramp|float) * repeat.item.target|float) | round(1) }}"
                            - service: light.turn_on
                              target: { entity_id: "{{ repeat.item.entity }}" }
                              data: { brightness_pct: "{{ [pct, 0]|max }}" }
                        - conditions: "{{ now_ts < start_ts or now_ts > dim_end }}"
                          sequence:
                            - service: light.turn_off
                              target: { entity_id: "{{ repeat.item.entity }}" }

      # --- 🍽️ Karmienie ---------------------------------------------
      - conditions: "{{ feed is not none and filter is not none }}"
        sequence:
          - choose:
              - conditions: "{{ trigger.entity_id == feed and is_state(feed, 'on') }}"
                sequence:
                  - service: switch.turn_off
                    target: { entity_id: "{{ filter }}" }
                  - service: timer.start
                    target: { entity_id: "{{ feed_timer }}" }
                    data: { duration: "{{ (feed_duration|int * 60)|int }}" }
                  - service: persistent_notification.create
                    data:
                      title: "🍽️ Rozpoczęto karmienie"
                      message: "Filtr wyłączony na {{ feed_duration }} minut."
              - conditions: "{{ trigger.entity_id == feed and is_state(feed, 'off') }}"
                sequence:
                  - service: switch.turn_on
                    target: { entity_id: "{{ filter }}" }
                  - service: timer.cancel
                    target: { entity_id: "{{ feed_timer }}" }
              - conditions: "{{ trigger.event_type == 'timer.finished' }}"
                sequence:
                  - service: switch.turn_on
                    target: { entity_id: "{{ filter }}" }
                  - service: input_boolean.turn_off
                    target: { entity_id: "{{ feed }}" }
                  - service: persistent_notification.create
                    data:
                      title: "🍽️ Karmienie zakończone (timer)"
                      message: "Filtr ponownie włączony po zakończeniu odliczania."

      # --- 💨 CO₂ wg ramp (±1 min, korekcja stanu + po restarcie) ---
      - conditions: "{{ co2 is not none }}"
        sequence:
          - variables:
              start_times:
                - !input front_start_time
                - !input back_start_time
                - !input sun_start_time
                - !input grow_start_time
              dim_times:
                - !input front_dim_time
                - !input back_dim_time
                - !input sun_dim_time
                - !input grow_dim_time
              earliest_start: "{{ start_times | reject('equalto', None) | min }}"
              earliest_dim: "{{ dim_times | reject('equalto', None) | min }}"
              now_t: "{{ as_timestamp(now()) }}"
              start_t: "{{ as_timestamp(as_datetime(now().strftime('%Y-%m-%dT' ~ earliest_start))) }}"
              off_t: "{{ as_timestamp(as_datetime(now().strftime('%Y-%m-%dT' ~ earliest_dim)) - timedelta(minutes=30)) }}"
              should_be_on: "{{ now_t >= start_t and now_t < off_t }}"
              is_on: "{{ is_state(co2, 'on') }}"
          - choose:

              # --- Włączenie CO₂ (okno ±1 min + korekcja stanu + po starcie) ---
              - conditions: >
                  {{ trigger.platform in ['homeassistant','time_pattern'] and
                     ((now_t >= (start_t - 60) and now_t <= (start_t + 60)) or (should_be_on and not is_on)) }}
                sequence:
                  - service: switch.turn_on
                    target: { entity_id: "{{ co2 }}" }
                  - service: persistent_notification.create
                    data:
                      title: "💨 CO₂ włączone"
                      message: >
                        CO₂ aktywowane o {{ earliest_start }}.
                        (dokładność ±1 minuty, korekcja stanu: {{ 'tak' if not is_on else 'nie' }})

              # --- Wyłączenie CO₂ (okno ±1 min + korekcja stanu + po starcie) ---
              - conditions: >
                  {{ trigger.platform in ['homeassistant','time_pattern'] and
                     ((now_t >= (off_t - 60) and now_t <= (off_t + 60)) or (not should_be_on and is_on)) }}
                sequence:
                  - service: switch.turn_off
                    target: { entity_id: "{{ co2 }}" }
                  - service: persistent_notification.create
                    data:
                      title: "💨 CO₂ wyłączone"
                      message: >
                        CO₂ wyłączone 30 min przed ściemnianiem ({{ earliest_dim }}).
                        (dokładność ±1 minuty, korekcja stanu: {{ 'tak' if is_on else 'nie' }})


      # --- 🩺 Diagnostyka blueprintu ----------------------------------
      - conditions: []
        sequence:
          - service: persistent_notification.create
            data:
              title: "🩺 Diagnostyka blueprintu Akwarium"
              message: |
                💡 Kanały aktywne: {{ [lights.front, lights.back, lights.sun, lights.grow] | select('string') | list }}
                💨 CO₂: {{ co2 if co2 else 'brak' }}
                💧 Filtr: {{ filter if filter else 'brak' }}
                🍽️ Karmienie: {{ feed if feed else 'brak' }}
                ⏳ Timer karmienia: {{ feed_timer if feed_timer else 'brak' }}

# =====================================================================
# 🧭 TODO – PLAN ROZWOJU: WERSJA 2025.3 BETA (CO₂ FIX RELEASE)
# =====================================================================
# Celem tej wersji jest zapewnienie 100% niezawodnej synchronizacji CO₂
# z harmonogramem ramp – również po restarcie Home Assistant i reloadzie konfiguracji.
#
# 💨 Zmiany planowane:
# ---------------------------------------------------------------------
# 1️⃣ Podwójna weryfikacja po starcie HA:
#     - CO₂ sprawdzane po 10 sekundach oraz ponownie po 60 sekundach.
#     - Gwarantowana korekta nawet przy wolnym starcie systemu.
#
# 2️⃣ Analiza state.last_changed:
#     - Jeżeli stan CO₂ nie zmienił się od czasu startu HA → wymuszenie korekty.
#
# 3️⃣ Obsługa reload automatyzacji (automation_reloaded):
#     - Korekta CO₂ uruchamiana również po zwykłym przeładowaniu konfiguracji.
#
# 4️⃣ Zintegrowana pętla ramp + CO₂:
#     - Weryfikacja CO₂ w tym samym przebiegu co rampy (time_pattern co minutę).
#
# 5️⃣ Tryb „cichy” (opcjonalny):
#     - Powiadomienia zastąpione wpisami w logbook.
#
# 6️⃣ Bezpieczny fallback:
#     - Jeśli nie można ustalić earliest_start / earliest_dim → CO₂ wyłączone awaryjnie.
#
# 🧠 Dodatkowe planowane usprawnienia:
#     - Lepsza odporność na różnice czasu systemowego po restarcie.
#     - Tryb debug (input_boolean.aquarium_debug) z logami decyzji ramp i CO₂.
#     - Spójne nazwy powiadomień i logów.
#
# 📅 Harmonogram:
#     🔹 Specyfikacja: ✅ gotowa
#     🔹 Implementacja 2025.3 BETA1: ⏳ do wykonania
#     🔹 Testy w HA 2025.10.x: ⏳ planowane
#     🔹 Wersja stabilna 2025.3 STABLE: 🗓️ po testach
#
# 📘 Plik docelowy:
#     blueprints/automation/gieoerzet/akwarium_2025.3_beta1.yaml
# =====================================================================
